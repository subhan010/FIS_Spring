package com.fis.springjpa.Employee;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;



@RestController
@RequestMapping("/employee") // This means URL's start with /demo (after Application path)
public class EmployeeController {
  @Autowired // This means to get the bean called userRepository
         // Which is auto-generated by Spring, we will use it to handle the data
  private EmployeeRepository epRepository;

  @PostMapping("/add") // Map ONLY POST Requests
  //public @ResponseBody String addNewEmployee (@RequestParam String name
    //  , @RequestParam String email, @RequestParam String dep) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request

   // Employee n = new Employee();
    
   // n.setName(name);
   // n.setEmail(email);
   // n.setDep(dep);
    public String addEmployee(@RequestBody Employee employee) {
	 epRepository.save(employee);
	   return "Saved";
}
   
  

  @GetMapping(path="/all")
  public  Iterable<Employee> getAllEmployee() {
    // This returns a JSON or XML with the users
    return epRepository.findAll();
  }
  @GetMapping("/{id}")
  public  Object getEmployee(@PathVariable int id) {
	  Optional<Employee> p=epRepository.findById(id);
		 if(p.isPresent())
		 {
			
			 return p.get();
		 }
		 else
		 {
			 return "Not found";
		 }
	  
   
   // return epRepository.findAll();
  }
  
  @PutMapping(path="/update") // Map ONLY POST Requests
  
    public String updateEmployee(@RequestBody Employee employee) {
	 Optional<Employee> p=epRepository.findById(employee.getId());
	 if(p.isPresent())
	 {
		 epRepository.save(employee);
		 return "saved";
	 }
	 else
	 {
		 return "Not found";
	 }
}
  @DeleteMapping("/delete") // Map ONLY POST Requests
  
  public String deleteEmployee(@RequestBody Employee employee) {
	 Optional<Employee> p=epRepository.findById(employee.getId());
	 if(p.isPresent())
	 {
		 epRepository.delete(employee);
		 return "saved";
	 }
	 else
	 {
		 return "Not found";
	 }
}

}
